@model PTVGeocodingDemo.Models.GeocodeRequest

@{
    ViewData["Title"] = "PTV Geocoding";
}

<!-- Optional: Custom Theme Styling -->
<style>
    body {
        background: linear-gradient(to right, #e0f7fa, #ffffff);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body::before {
    content: '';
    position: fixed;
    top: 0; left: 0;
    width: 100vw;
    height: 100vh;
    background: radial-gradient(circle at 20% 30%, rgba(255,255,255,0.05), transparent 70%),
                radial-gradient(circle at 80% 70%, rgba(255,255,255,0.05), transparent 70%);
    z-index: -1;
}

    .card-theme {
        background-color: #ffffff;
        border: none;
        border-radius: 10px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .btn-theme {
        background-color: #007bff;
        color: white;
        font-weight: 600;
    }

    .btn-theme:hover {
        background-color: #0056b3;
    }

    #map {
        height: 400px;
        border-radius: 8px;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #loadingOverlay {
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
       /*  background: rgba(255, 255, 255, 0.8);
        background: rgba(0, 0, 0, 0.3); */
        background: transparent;
        z-index: 9999;
        display: none;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    #loadingOverlay img {
        width: 100px;
        height: 100px;
    }

    #loadingOverlay p {
        margin-top: 10px;
        font-weight: 600;
        color: #555;
    }

     #particles-js {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1; /* behind everything */
        background: linear-gradient(-45deg, #1e3c72, #2a5298); /* optional fallback bg */
    }

    .earth img {
        width: 100px;
        height: 100px;
        display: inline;
        margin: 0 auto;
    }

</style>

<div id="particles-js"></div>

<div id="loadingOverlay">
    <img src="~/images/Spinner@1x-1.0s-200px-200px.gif" alt="Loading..." />
    <p>Please wait, locating...</p>
</div>

<div class="container mt-5">
    <div class="card shadow p-4">
        <h2 class="mb-4 text-primary">
            <span class="earth"><img src="~/images/earth.gif"/></span> PTV Geocoding API Demo
        </h2>

        <form asp-action="Index" method="post" class="row g-3">
            <div class="col-md-12">
                <label asp-for="Address" class="form-label">Enter Address:</label>
                <input asp-for="Address" class="form-control" placeholder="e.g., Berlin, Germany" />
            </div>
            <div class="col-12 col-md-8 ">
                <button type="submit" class="btn btn-primary w-100">Get Coordinates</button>
            </div>
            <div class="col-12 col-md-4">
                <button type="button" class="btn btn-outline-secondary w-100" onclick="goBack()">⬅ Back</button>
            </div>
        </form>

        @if (Model?.Latitude != null)
        {
            <div id="resultWrapper">
                <div class="alert alert-success mt-4">
                    <h5>📍 Result:</h5>
                    <p><strong>Latitude:</strong> @Model.Latitude</p>
                    <p><strong>Longitude:</strong> @Model.Longitude</p>

                    <button type="button" class="btn btn-outline-secondary mt-3" onclick="goBack()">⬅ Back</button>
                </div>

                 <div id="map" style="height: 400px;" class="mt-3"></div>
            </div>
        }
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

@if (Model?.Latitude != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var map = L.map('map').setView([@Model.Latitude, @Model.Longitude], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            L.marker([@Model.Latitude, @Model.Longitude]).addTo(map)
                .bindPopup('📍 @Model.Address')
                .openPopup();
        });
    </script>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form");
        const overlay = document.getElementById("loadingOverlay");

        if (form && overlay) {
            form.addEventListener("submit", function () {
                overlay.style.display = "flex";
            });
        }
    });


      particlesJS('particles-js', {
        particles: {
            number: { value: 60 },
            color: { value: "#ffffff" },
            shape: { type: "star",polygon: {
                        nb_sides: 5 // you can adjust the star complexity
                    } },
            opacity: { value: 0.5,
                    random: true,
                    anim: {
                        enable: true,
                        speed: 0.5,
                        opacity_min: 0.1,
                        sync: false
                        }
                    },
            size: { value: 3 },
            line_linked: {
                enable: true,
                distance: 120,
                color: "#ffffff",
                opacity: 0.2,
                width: 1
            },
            move: {
                enable: true,
                speed: 1.5
            }
        },
        interactivity: {
            events: {
                onhover: { enable: true, mode: "repulse" },
                onclick: { enable: true, mode: "push" }
            }
        }
    });

    function goBack() {
        // Hide result
        const result = document.getElementById("resultWrapper");
        if (result) result.style.display = "none";

        // Clear the input field
        const addressInput = document.querySelector("input[name='Address']");
        if (addressInput) addressInput.value = "";

        // Optional: Clear the map if you load it dynamically
        const map = document.getElementById("map");
        if (map) map.innerHTML = "";
    }
</script>